Nous avons choisi d'expoiter la propiété mutable des listes en Lisp pour mettre directement à jour les informations nécessaires d'un appel récurisif à l'autre, sans passer par une valeur envoyée.
Cette méthode présente plusieurs avantages :
    Etant donné que chaque liste n'est créée qu'une seule fois et qu'il n'y a pas besoin de faire de copie à partir de la valeur de retour d'un appel, le nombre d'opérations effectuées est réduit
    Le nombre de valeur de retour final est réduit au strict minimum, tout en permettant à l'utilisateur de pouvoir récupérer les valeurs des autres listes impliquées (en passant une liste définie et stocké précédemment dans une variable en paramètre par exemple)
Nous lui reconnaissons toutefois un inconvénient, celui de modifier la valeur de liste passée en paramètre et donc d'imposer de lui passer une copie. 

RechercheProfondeur
    Paramètres :
        Obligatoires :
            case : entier
            carte : liste (d'adjacence)
            carteHorcruxes : liste d'association
            carteArmes : liste d'association
            descriptionHorcruxes : liste d'association
        Optionnels :
            profondeur : entier (attendu valant 0 au premier appel)
            cheminParcouru : liste (attendue vide au premier appel)
            armesPossedees : liste (attendue vide au premier appel)
            horcruxesDetruits : liste (attendue vide au premier appel)
    Début :
        #Traitement de la case active
        Ajouter case à cheminParcouru
        armeCase <- assoc(case, carteArmes)
        horcruxeCase <- assoc(case, carteHorcruxes)
        Si armeCase :
            Ajouter le deuxième élément de armeCase à armesPossedes
        FinSi
        Si horcruxeCase et hasBonneArme(cadr(horcruxeCase), armesPossedees, descriptionHorcruxes) :
            Ajouter le deuxième élément de horcruxeCase à horcruxesDetruits
        FinSi

        #Recherche et traitement des successeurs valides (non déjà parcouru notamment)
        Pour chaque successeur valide succ de case :
            tmp <- RechercheProfondeur(succ, carte, carteHorcruxes, carteArmes, descriptionHorcruxes, profondeur + 1, cheminParcouru, armesPossedes) #Pas de risque de duplication des horcruxes et armes car chacun n'est positionné que sur une seule case et on ne vérifie chaque case qu'une unique fois grâce à cheminParcouru (à changer donc si cette règle de l'unicité des horcruxes venait à changer)
            Remplacer horcruxesDetruits par le premier élément de tmp
            Remplacer armesPossedees par le second élément de tmp
        FinPour
        Renvoyer (horcruxesDetruits armesPossedes)
    Fin

Conscients de la contrainte de devoir passer de nombreux paramètres par défaut et soucieux d'éviter toute erreur, nous proposons une solution simulant des arguments par défauts.

RechercheProfondeur2
    Paramètres :
        Obligatoires :
            case : entier
            carte : liste (d'adjacence)
            carteHorcruxes : liste d'association
            carteArmes : liste d'association
            descriptionHorcruxes : liste d'association
        Optionnels :
            profondeur : entier
            cheminParcouru : liste
            armesPossedes : liste
            horcruxesDetruits : liste
    Début :
        #Simulation d'attributs par défaut
        Si non(profondeur) :
            profondeur <- 0
        FinSi
        Si non(cheminParcouru) :
            cheminParcouru <- liste vide
        FinSi
        Si non(armesPossedes) :
            armesPossedes <- liste vide
        FinSi
        Si non(horcruxesDetruits) :
            horcruxesDetruits <- liste vide
        FinSi

        #Traitement de la case active
        Ajouter case à cheminParcouru
        armeCase <- assoc(case, carteArmes)
        horcruxeCase <- assoc(case, carteHorcruxes)
        Si armeCase :
            Ajouter le deuxième élément de armeCase à armesPossedes
        FinSi
        Si horcruxeCase et hasBonneArme(cadr(horcruxeCase), armesPossedees, descriptionHorcruxes) :
            Ajouter le deuxième élément de horcruxeCase à armesPossedes
        FinSi

        #Recherche et traitement des successeurs valides (non déjà parcouru notamment)
        Pour chaque successeur valide succ de case :
            Concaténer en place horcruxesDetruits et le premier élément de RechercheProfondeur2(succ, profondeur + 1, carte, carteHorcruxes, carteArmes, descriptionHorcruxes, cheminParcouru, armesPossedes) #Pas de risque de duplication des horcruxes car chacun n'est posititionné que sur une seule case et on ne vérifie chaque case qu'une unique fois grâce à cheminParcouru (à changer donc si cette règle de l'unicité des horcruxes venait à changer)
        FinPour
        Renvoyer (horcruxesDetruits armesPossedes)
    Fin

Cette solution impose toutefois de réaliser plusieurs tests conditionnels à chaque appel, ce qui pourrait s'avérer coûteux avec un grand nombre de successeurs pour chaque case.
La solution optimale est alors de un compromis : la deuxième fonction appelant ensuite la première à chaque appel.

RechercheProfondeur3
    Paramètres :
        Obligatoires :
            case : entier
            carte : liste (d'adjacence)
            carteHorcruxes : liste d'association
            carteArmes : liste d'association
            descriptionHorcruxes : liste d'association
        Optionnels :
            profondeur : entier
            cheminParcouru : liste
            armesPossedes : liste
            horcruxesDetruits : liste
    Début :
        #Simulation d'attributs par défaut
        Si non(profondeur) :
            profondeur <- 0
        FinSi
        Si non(cheminParcouru) :
            cheminParcouru <- liste vide
        FinSi
        Si non(armesPossedes) :
            armesPossedes <- liste vide
        FinSi
        Si non(horcruxesDetruits) :
            horcruxesDetruits <- liste vide
        FinSi

        #Traitement de la case active
        Ajouter case à cheminParcouru
        armeCase <- assoc(case, carteArmes)
        horcruxeCase <- assoc(case, carteHorcruxes)
        Si armeCase :
            Ajouter le deuxième élément de armeCase à armesPossedes
        FinSi
        Si horcruxeCase et hasBonneArme(cadr(horcruxeCase), armesPossedees, descriptionHorcruxes) :
            Ajouter le deuxième élément de horcruxeCase à armesPossedes
        FinSi

        #Recherche et traitement des successeurs valides (non déjà parcouru notamment)
        Pour chaque successeur valide succ de case :
            Concaténer en place horcruxesDetruits et le premier élément de RechercheProfondeur(succ, profondeur + 1, carte, carteHorcruxes, carteArmes, descriptionHorcruxes, cheminParcouru, armesPossedes) #Pas de risque de duplication des horcruxes car chacun n'est posititionné que sur une seule case et on ne vérifie chaque case qu'une unique fois grâce à cheminParcouru (à changer donc si cette règle de l'unicité des horcruxes venait à changer)
        FinPour
        Renvoyer (horcruxesDetruits armesPossedes)
    Fin